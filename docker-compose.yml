services:
  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9000/minio/health/live || exit 1"]
      interval: 20s
      timeout: 10s
      retries: 3

# Reference: https://hackernoon.com/how-to-set-up-a-development-machine-with-mlflow-and-minio
  mlflow:
    build:
      context: .
      dockerfile: Dockerfile.mlflow
    container_name: mlflow
    ports:
      - "5000:5000"
    environment:
      MLFLOW_TRACKING_URI: http://mlflow:5000
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      AWS_ACCESS_KEY_ID: ${MINIO_ACCESS_KEY}
      AWS_SECRET_ACCESS_KEY: ${MINIO_SECRET_KEY}
    command: >
      mlflow server 
      --backend-store-uri sqlite:///mlflow/mlflow.db 
      --host 0.0.0.0
      --serve-artifacts
      --artifacts-destination s3://mlflow-artifacts 
    volumes:
      - mlflow-data:/mlflow
    depends_on:
      minio:
        condition: service_healthy

  object_detection_service:
    image: object-detection-service:v1.0
    ports:
      - "50051:50051"
    volumes:
      - ${PROJECT_DIR}/data:/app/data
      - ${PROJECT_DIR}/data:${PROJECT_DIR}/data
    environment:
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      AWS_ACCESS_KEY_ID: ${MINIO_ACCESS_KEY}
      AWS_SECRET_ACCESS_KEY: ${MINIO_SECRET_KEY}
      MINIO_ENDPOINT: http://minio:9000
      MLFLOW_TRACKING_URI: http://mlflow:5000
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    ipc: host
    stdin_open: true
    tty: true
    depends_on:
      minio:
        condition: service_healthy
      mlflow:
        condition: service_started

volumes:
  minio-data:
  mlflow-data:
